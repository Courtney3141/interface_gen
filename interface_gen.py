#!/usr/bin/python3
from interface_parse import Interface, ArgDirection

class InterfaceGen:
    def __str__(self):

        return str(self.__class__) + ": " + str(self.__dict__)

    def __init__(self, interface, filebasename , wordsize):

        self.interface = interface
        self.filebasename = filebasename
        self.wordsize = wordsize

        
class InterfacePrint(InterfaceGen):
    def __str__(self):

        return str(self.__class__) + ": " + str(self.__dict__)

    def __init__(self, interface, filebasename = '', wordsize=8):

        super().__init__(interface, filebasename, wordsize)
        
        for i in self.interface.includes:
            print(f'#include {i.header}')

        for i in self.interface.defines:
            print(f'#define {i.name} ({i.value})')

        for i in self.interface.methods:
            print(f'{i.name}[id={i.id}](',end='')
            for a in i.args[:-1]:
                if a.direction == ArgDirection.IN:
                    print(f'{a.ctype}[size={a.size}] {a.name}',end=', ')
                else:
                    print(f'{a.ctype}[size={a.size}] *{a.name}',end=', ')
            if i.args[-1] != None:
                a = i.args[-1] 
                if a.direction == ArgDirection.IN:
                    print(f'{a.ctype}[size={a.size}] {a.name}',end='')
                else:
                    print(f'{a.ctype}[size={a.size}] *{a.name}',end='')
                
            print(f') -> {i.return_type}')

preamble = '''
/* This file is automatically generated, DO NOT EDIT */
'''

class InterfaceClientStubs(InterfaceGen):
    def __str__(self):

        return str(self.__class__) + ": " + str(self.__dict__)

    def printarg(self,a, e, f):
        if a.const =='true':
            const = 'const '
        else:
            const=''
        if a.direction == ArgDirection.IN:
            print(f'{const}{a.ctype} {a.name}',end=e, file=f)
        else:
            print(f'{a.ctype} *{a.name}',end=e, file=f)

    def __init__(self, interface, filebasename = '', wordsize=8):

        super().__init__(interface, filebasename, wordsize)

        with open(self.filebasename + '.h', 'w') as hf:
            print(preamble, file=hf)
            
            for i in self.interface.includes:
                print(f'#include {i.header}',file=hf)

            for i in self.interface.defines:
                print(f'#define {i.name} ({i.value})', file=hf)

            for i in self.interface.methods:
                print(f'#define METHOD_NUM_{i.name.upper()} {i.id}',file=hf)
                print(f'extern {i.return_type} {i.name}(',end='', file=hf)
                    
                for a in i.args[:-1]:
                    self.printarg(a,', ',hf)
                            
                if len(i.args) != 0:
                    a = i.args[-1] 
                    self.printarg(a,'',hf)
                else:
                    print(f'void',end='', file=hf)
                        
                
                print(');\n',file=hf)
            
            
        with open(self.filebasename + '.c', 'w') as cf:
            print(preamble, file=cf)
            print(f'#include <{self.filebasename + ".h"}>',file=cf)

            for i in self.interface.includes:
                print(f'#include {i.header}',file=cf)


            for i in self.interface.methods:
                    print(f'{i.return_type} {i.name}(',end='', file=cf)
                    
                    for a in i.args[:-1]:
                        if a.const =='true':
                            const = 'const '
                        else:
                            const=''
                        if a.direction == ArgDirection.IN:
                            print(f'{const}{a.ctype} {a.name}',end=', ', file=cf)
                        else:
                            print(f'{a.ctype} *{a.name}',end=', ', file=cf)
                            
                    if len(i.args) != 0:
                        a = i.args[-1] 
                        if a.const =='true':
                            const = 'const '
                        else:
                            const=''
                        if a.direction == ArgDirection.IN:
                            print(f'{const}{a.ctype} {a.name}',end='', file=cf)
                        else:
                            print(f'{a.ctype} *{a.name}',end='', file=cf)
                    else:
                        print(f'void',end='', file=cf)
                        
                
                    print(')\n{',file=cf)
            
            
            
                    print('}',file=cf)
